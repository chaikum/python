Working With JSON Data in Python
=================================
JSON is used to transport the data.
In other words we can alos say that JSON is used mostly to store and exchange the data.
XML and YAML also do the similar work of JSON.

History of JSON:
================
JSON is inspired from the Java script programming language.
JSON stands for Java Script Oriented Notation.

Example of JSON file:
=====================
{
    "firstName": "Jane",
    "lastName": "Doe",
    "hobbies": ["running", "sky diving", "singing"],
    "age": 35,
    "children": [
        {
            "firstName": "Alice",
            "age": 6
        },
        {
            "firstName": "Bob",
            "age": 8
        }
    ]
}
=======================================================
JSON support primitive types like strings and numbers as well as nested lists and objects.

Python Supports JSON Natively!
==============================
Python comes with a built-in package called json for encoding and decoding JSON data.

"import json"

The process of encoding JSON is called serialization.
Serialization is nothing but transformation of data in to series of bytes.
Deserialization is the reciprocal process of decoding data that has been stored or delivered in the JSON standard.

In simple example we can assume encoding is for writing data to disk, while decoding is for reading data into memory.


Serializing JSON:
=================

What happens after a computer processes lots of information? 
It needs to take a data dump. Accordingly, the json library exposes the dump() method for writing data to files. 
There is also a dumps() method (pronounced as “dump-s”) for writing to a Python string.

Simple Python objects are translated to JSON according to a fairly intuitive conversion.

Python	                JSON
dict	                  object
list, tuple	            array
str	                    string
int, long, float	      number
True	                  true
False	                  false
None	                  null

A Simple Serialization Example:
===============================
Imagine you’re working with a Python object in memory that looks a little something like this:

data = {
    "president": {
        "name": "Zaphod Beeblebrox",
        "species": "Betelgeusian"
    }
}

It is critical that you save this information to disk, so your mission is to write it to a file.
Using Python’s context manager, you can create a file called data_file.json and open it in write mode. (JSON files conveniently end in a .json extension.)

with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)


Note that dump() takes two positional arguments: 
(1) the data object to be serialized. 
(2) the file-like object to which the bytes will be written.




